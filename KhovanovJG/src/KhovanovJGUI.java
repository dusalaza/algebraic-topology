
import static java.awt.event.KeyEvent.VK_ENTER;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

/*
 * Copyright (C) 2015 Dido Salazar
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

/**
 *
 * @author didosalazar
 */
public class KhovanovJGUI extends javax.swing.JFrame {

    /**
     * Creates new form KhovanovJGUI
     */
    public KhovanovJGUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        displayFormatButtonGroup = new javax.swing.ButtonGroup();
        contentsDialog = new javax.swing.JDialog();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        contentsCloseButton = new javax.swing.JButton();
        aboutDialog = new javax.swing.JDialog();
        aboutCloseButton = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        saveAsDialog = new javax.swing.JDialog();
        newFileNameTextField = new javax.swing.JTextField();
        saveAsButton = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        calcButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        outputClearButton = new javax.swing.JButton();
        clearAllButton = new javax.swing.JButton();
        tableGenButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        listInput = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        listOutput = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        saveMenuItem = new javax.swing.JMenuItem();
        saveAsMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        cutMenuItem = new javax.swing.JMenuItem();
        copyMenuItem = new javax.swing.JMenuItem();
        pasteMenuItem = new javax.swing.JMenuItem();
        selectAllMenuItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        displayFormatMenu = new javax.swing.JMenu();
        polynomialRadioButtonMenuItem = new javax.swing.JRadioButtonMenuItem();
        tupleRaidoButtonMenuItem = new javax.swing.JRadioButtonMenuItem();
        tabularRadioButtonMenuItem = new javax.swing.JRadioButtonMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        formatCheckBoxMenuItem = new javax.swing.JCheckBoxMenuItem();
        helpMenu = new javax.swing.JMenu();
        contentsMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();

        contentsDialog.setTitle("Help");
        contentsDialog.setMinimumSize(new java.awt.Dimension(405, 500));

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setText("----------------About the Program---------------\nThis program evaluates the furnace foam. The input \nx, y, z, u, v is the number of dots on the faces that \ncorrespond to the variables. It can compute the result of\none dot configuration, and it can compute the result for\nan entire list of dot configurations. It is also able to \ngenerate a table of all the configurations with nonzero \noutputs.\n\nFor example, the input 1, 0, 1, 1, 0 corresponds to having\n1 dot on the X-face (leftmost gray surface), 1 dot on the \nZ-face (the surface between the gray faces) and 1 dot on\nthe U-face (rightmost gray surface).\n\n--------------------Input---------------------\nSpaces must be included in between the commas and the\nnumbers that come after them. \n\nExample:\n\n1,2,3,4,5 is not valid input, but 1, 2, 3, 4, 5 is. \n\nTo enter a list of dot configurations type in the first line\nthen press ENTER and type the next line, and press ENTER.\nContinue in this fashion until you finished putting in\nyour inputs. \n\nExample:\n\n1, 2, 3, 4, 5 [press ENTER/RETURN]\n1, 2, 3, 4, 5 [press ENTER/RETURN]\n1, 2, 3, 4, 5 [press ENTER/RETURN]\n\nWhen you are ready to compute, click the \"Calculate\"\nbutton.\n\n--------------------Output--------------------\nThe output will be displayed in LaTeX format with the \nalignment character \"&\" between the input and output.\nThe output is also in a text box so the results may be\neasily copied and pasted. It also allows users to \nadd text or commands to the output before copying and \npasting it into their documents. \n\nThe default setting converts the input to a polynomial \nwhere each exponent corresponds to the number of dots \non the face corresponding to the variable. \n\nExample:\n\nInput: 1, 0, 1, 1, 0  | Output: F(XZU) &= -XZ  \n\nIf there are several lines of input, each output will also \nhave a LaTeX new line command (\\\\) added to the end of\nit.\n\n*To change the formatting of the input to the foam \n  notation F_{uv}(x, y, z), go to \n  Edit->Display Format and select Foam Notation\n\n*To change the formatting of the output to tabular form\n  which will retrun answers as they would appear in a \n  table of values\n   \n  E.g. XZU & -XZ \\\\ instead of F(XZU) &= -XZ \n \n  go to Edit->Display Format and select \n  LaTeX tabular/array.\n\n*To remove formatting characters from the output, go to \n  Edit->Display Format and deselect \n  \"Include LaTeX Formatting Characters\"\n  \n----------------Saving Output---------------\nIf you would like a .txt file with a copy of the results in \nthe Output text box, press the \"Save\" button. It will write \nthe output to a .txt file, HKJRecord.txt. Alternatively, go to \nFile->Save. \n\n--------Generate a Table of Nonzero Values--------\nTo generate a list of all the dot cofigurations with non-\nzero images click the \"Generate Table\" button.  The \nanswer will appear in the output box in the default \nformatting. To change the formatting see the Output\nsection of this help file.\n\nTo obtain it in a .txt file, click the \"Save\" button when \nfinished. \n\n------------Mathematical Background-------------\nFor more information on the Furnace foam see the \nFurnaceFoam.pdf file or read \"sl3-Link Homology and \nRepresentation Varieties of Webs and Foams\" available \nhere: \n");
        jTextArea1.setDragEnabled(false);
        jScrollPane3.setViewportView(jTextArea1);

        contentsCloseButton.setText("Close");
        contentsCloseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                contentsCloseButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout contentsDialogLayout = new javax.swing.GroupLayout(contentsDialog.getContentPane());
        contentsDialog.getContentPane().setLayout(contentsDialogLayout);
        contentsDialogLayout.setHorizontalGroup(
            contentsDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contentsDialogLayout.createSequentialGroup()
                .addGap(163, 163, 163)
                .addComponent(contentsCloseButton)
                .addGap(163, 163, 163))
            .addGroup(contentsDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3)
                .addContainerGap())
        );
        contentsDialogLayout.setVerticalGroup(
            contentsDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contentsDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 453, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(contentsCloseButton)
                .addContainerGap())
        );

        aboutDialog.setMinimumSize(new java.awt.Dimension(400, 300));

        aboutCloseButton.setText("Close");
        aboutCloseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutCloseButtonActionPerformed(evt);
            }
        });

        jScrollPane4.setBackground(javax.swing.UIManager.getDefaults().getColor("Label.background"));

        jTextArea2.setEditable(false);
        jTextArea2.setBackground(javax.swing.UIManager.getDefaults().getColor("Label.background"));
        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jTextArea2.setText("Developed in 2015 by Dido Salazar. \n\nThis program is available under the GNU GPL 2.0 License.  \n\nThis program evaluates the Furnace foam based on dot \nplacements. The Furnace foam is in fact the shriek map\nH^{*}(J) -> H^{*}(Fl_{3}) on cohomology. This program\nreturns the answers as polynomials. The corresponding \nSchubert varieties can be found using the correspondence \nmentioned in FurnaceFoam.pdf, or in \"sl3-Link Homology \nand Representation Varieties of Webs and Foams.\" \navailable here:\n\nI wrote this program to compute the evaluations for my\nresearch. The original is a command line program which \nevaluated all possible combinations and put out a .txt file\nwith all the nonzero answers in tabular form. Later, \nI adapted it to allow me to change the notation to help\nwith placing the information in LaTeX. \n\nThis GUI is a user-friendly version of the original\nprogram that has features that are not in the \ncommand-line version. It also allows for quicker \nchanges to the display formats and allows \nfor customization of the answers before copy/paste \noperations. \n\nFor help with using the program, go to Help->Contents");
        jScrollPane4.setViewportView(jTextArea2);

        javax.swing.GroupLayout aboutDialogLayout = new javax.swing.GroupLayout(aboutDialog.getContentPane());
        aboutDialog.getContentPane().setLayout(aboutDialogLayout);
        aboutDialogLayout.setHorizontalGroup(
            aboutDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(aboutDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4)
                .addContainerGap())
            .addGroup(aboutDialogLayout.createSequentialGroup()
                .addGap(161, 161, 161)
                .addComponent(aboutCloseButton)
                .addContainerGap(160, Short.MAX_VALUE))
        );
        aboutDialogLayout.setVerticalGroup(
            aboutDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, aboutDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 253, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(aboutCloseButton)
                .addContainerGap())
        );

        saveAsDialog.setMinimumSize(new java.awt.Dimension(439, 200));

        newFileNameTextField.setText("HKJRecord.txt");
        newFileNameTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                newFileNameTextFieldKeyPressed(evt);
            }
        });

        saveAsButton.setText("Save");
        saveAsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAsButtonActionPerformed(evt);
            }
        });

        jLabel9.setText("Save File As (Enter as filename.extension [default extension is .txt]):");

        javax.swing.GroupLayout saveAsDialogLayout = new javax.swing.GroupLayout(saveAsDialog.getContentPane());
        saveAsDialog.getContentPane().setLayout(saveAsDialogLayout);
        saveAsDialogLayout.setHorizontalGroup(
            saveAsDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(saveAsDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(saveAsDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(saveAsDialogLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(saveAsButton))
                    .addComponent(jLabel9)
                    .addComponent(newFileNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        saveAsDialogLayout.setVerticalGroup(
            saveAsDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, saveAsDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(newFileNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(saveAsButton)
                .addContainerGap())
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Furnace Evaluator");

        calcButton.setText("Calculate");
        calcButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calcButtonActionPerformed(evt);
            }
        });

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        outputClearButton.setText("Clear Output");
        outputClearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                outputClearButtonActionPerformed(evt);
            }
        });

        clearAllButton.setText("Clear All");
        clearAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearAllButtonActionPerformed(evt);
            }
        });

        tableGenButton.setText("Generate Table");
        tableGenButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tableGenButtonActionPerformed(evt);
            }
        });

        listInput.setColumns(10);
        listInput.setRows(5);
        jScrollPane1.setViewportView(listInput);

        listOutput.setColumns(20);
        listOutput.setRows(5);
        jScrollPane2.setViewportView(listOutput);
//This is where the Furnace.jpg file is placed
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Furnace.jpg"))); // NOI18N

        jLabel2.setText("Input (1 set per line): x, y, z, u ,v ");

        jLabel3.setText("Output");

        jLabel4.setText("Get all nonzero values:");
//This is where the JumpingJackCap.jpg file is placed. Change the path to match with its current location
        jLabel5.setIcon(new javax.swing.ImageIcon("/KhovanovJG/JumpingJackCap.jpg")); // NOI18N

        jLabel6.setText("-Z");

        jLabel7.setText("X");

        jLabel8.setText("Y");

        fileMenu.setMnemonic('f');
        fileMenu.setText("File");

        saveMenuItem.setMnemonic('s');
        saveMenuItem.setText("Save");
        saveMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveMenuItem);

        saveAsMenuItem.setMnemonic('a');
        saveAsMenuItem.setText("Save As ...");
        saveAsMenuItem.setDisplayedMnemonicIndex(5);
        saveAsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAsMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveAsMenuItem);

        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        editMenu.setMnemonic('e');
        editMenu.setText("Edit");

        cutMenuItem.setMnemonic('t');
        cutMenuItem.setText("Cut");
        cutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cutMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(cutMenuItem);

        copyMenuItem.setMnemonic('y');
        copyMenuItem.setText("Copy");
        copyMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(copyMenuItem);

        pasteMenuItem.setMnemonic('p');
        pasteMenuItem.setText("Paste");
        pasteMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pasteMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(pasteMenuItem);

        selectAllMenuItem.setText("Select All");
        selectAllMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectAllMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(selectAllMenuItem);
        editMenu.add(jSeparator1);

        displayFormatMenu.setText("Display Format");

        displayFormatButtonGroup.add(polynomialRadioButtonMenuItem);
        polynomialRadioButtonMenuItem.setSelected(true);
        polynomialRadioButtonMenuItem.setText("Polynomial Form [F(XYZUV) &= XYZ]");
        polynomialRadioButtonMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                polynomialRadioButtonMenuItemActionPerformed(evt);
            }
        });
        displayFormatMenu.add(polynomialRadioButtonMenuItem);

        displayFormatButtonGroup.add(tupleRaidoButtonMenuItem);
        tupleRaidoButtonMenuItem.setText("Foam Notation [F_{uv}(x, y, z) &= XYZ]");
        tupleRaidoButtonMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tupleRaidoButtonMenuItemActionPerformed(evt);
            }
        });
        displayFormatMenu.add(tupleRaidoButtonMenuItem);

        displayFormatButtonGroup.add(tabularRadioButtonMenuItem);
        tabularRadioButtonMenuItem.setText("LaTeX tabular/array [input & output]");
        tabularRadioButtonMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tabularRadioButtonMenuItemActionPerformed(evt);
            }
        });
        displayFormatMenu.add(tabularRadioButtonMenuItem);
        displayFormatMenu.add(jSeparator2);

        formatCheckBoxMenuItem.setSelected(true);
        formatCheckBoxMenuItem.setText("Include LaTeX Formatting Characters");
        formatCheckBoxMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                formatCheckBoxMenuItemActionPerformed(evt);
            }
        });
        displayFormatMenu.add(formatCheckBoxMenuItem);

        editMenu.add(displayFormatMenu);

        menuBar.add(editMenu);

        helpMenu.setMnemonic('h');
        helpMenu.setText("Help");

        contentsMenuItem.setMnemonic('c');
        contentsMenuItem.setText("Contents");
        contentsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                contentsMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(contentsMenuItem);

        aboutMenuItem.setMnemonic('a');
        aboutMenuItem.setText("About");
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(outputClearButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(calcButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(clearAllButton)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(188, 188, 188)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(tableGenButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel8))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel6)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(saveButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel3)))
                        .addGap(3, 3, 3)))
                .addGap(62, 62, 62))
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel7)
                .addGap(103, 103, 103))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tableGenButton)
                            .addComponent(jLabel8))
                        .addGap(72, 72, 72))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel5)
                                .addGap(2, 2, 2)
                                .addComponent(jLabel6))
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)
                        .addComponent(saveButton)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addComponent(calcButton)
                        .addGap(18, 18, 18)
                        .addComponent(outputClearButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(clearAllButton))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed
    
    /**
     * Checks if an array is a cyclic permutation of another (inplace O(n) algorithm) 
     * @param a array
     * @param b array to compare to a
     * @return returns true or false
   */
    public static boolean isRot(int[] a, int[] b){

        int n = a.length; //length of array
    
        //return false if the sizes don’t match
        if(n != b.length){
          return false;
        }
        
        //indices and counters
        int i = -1;
        int j = -1;
        int matchp1 = 1; //number of matches + 1
        
    /* The following loop begins by searching for the index of the first element of b inside a.
     * Once it finds it, the inner loop compares the consecutive entries of a to b and counts the matches. 
     * If they all match, the function returns. If there is a mismatch, the bigger loop breaks and the function returns false.
    */   
        while((i < n-1) && (j < n-1)){
            
        //track the number of consecutive matches
            while((matchp1 <= n) && (a[(i + matchp1) % n] == b[(j + matchp1) % n])){
                matchp1++;
            } 
      
        //if all match, then return
            if(matchp1 > n){
                return true; 
            }
      
        //Search for the index of b[0] inside a
            if(a[(i + matchp1) % n] > b[(j + matchp1) % n]){
                i += matchp1;     
            } else{
                j += matchp1;
            }
        }
        return false;
    }
    
    /**
     * Khovanov’s Theta-Foam Evaluation 
     * @param abc the tuple to be evaluated it corresponds to (z, u, v) 
     * @return returns 0, 1, or -1
   */
    public static int kTheta(int[] abc){

        //check if a + b + c = 3
        int sum = 0;
    
        for(int i = 0; i < abc.length; i++){
            sum += abc[i];
        }
    
        //return 0 if the sum != 3
        if(sum != 3){ 
            return 0;
        } 
    
    //Check if the tuple is a cyclic permutation of (0,1,2) or (0, 2, 1), else it is 0
        int[] pos = {0, 1, 2};
        int[] neg = {0, 2, 1};

        if(isRot(abc, pos)){ 
            return 1;
        }else if(isRot(abc, neg)){
            return -1;
        }else{
            return 0;
        }    
    }
    
    /**
     * converts tuples to polynomials in the output string 
     * @param numTuple an array of ints to be used as powers in a polynomial
   */
    public static void dotstoPoly(int[] numTuple){
        int zeros = 0;
        for(int i = 0; i < numTuple.length; i++){
            if(numTuple[i] > 1){
                output.append(monomial[i] + numTuple[i] + "}");
            } else if(numTuple[i] == 1){
                output.append(monomial[i]);
                output.delete(output.length() - 2, output.length());
            } else{
            zeros++;  
            }
      
            if(zeros == numTuple.length){
                output.append("1");
            }
        }
        return;   
    }
    
    /** 
     * the furnace evaluation. Returns t/f so it can be used in the base case of F3Images
     * @param dots the number of dots on each facet
     * @return puts a polynomial in the string builder
   */
    public static boolean furnaceEval(int[] dots){
      
    //Check if mlr is zero. If it is, then it returns true so F3Images skips to next combo. Otherwise it lets the calculator mode print the answer as zero.
        int[] mlr = new int[3];
      
        System.arraycopy(dots, 0, mlr, 0, mlr.length);
      
        int[] zuv = {dots[DOTS - 2], 2, dots[DOTS - 1]}; //For theta evaluation
      
    //check if zuv or mlr is zero in each case in the evaluation formula
      
        int numZero = 0;
        int mlrSum = 0;
        int zeroCheck = 0;
        boolean isZero = false;
      
        for(int i = 0; i < zuv.length; i++){
            zuv[1] -= i;
            mlr[2] += i;
          
            mlrSum = 0;
            isZero = false;
            zeroCheck = 0;
          
            for(int j = 0; j < mlr.length; j++){
                mlrSum += mlr[j];
                if(mlr[j] > 2){
                    isZero = true;  
                    break;        
                } else if(mlr[j] < 1){
                    zeroCheck++;
                }
            }
          
            if(isZero || (kTheta(zuv) == 0) || (mlrSum > 3) || (zeroCheck == 0)){
                numZero++;
            }
          
            zuv[1] += i;
            mlr[2] -= i;          
        }
      
    //if there are three zero terms then skip to next
     
        if(numZero > 2){
            output.append("0");
            return true;  //Lets F3Images skip
        }
      
    //write out answer in LaTeX/Reader friendly format
      
        int plusIndex = 0; //gets index of sign of first term when it is a plus     
      
    //Writes each term with sign
      
        for(int j = 0; j < 3; j++){
       
            zuv[1] -= j; //decrease degree of Z in each term 
            mlr[2] += j; //increase degree of Z in each term
          
      //Put the sign
            if(kTheta(zuv) < 0){
                output.append("+");
                plusIndex = output.length() - 1;
            } else if(kTheta(zuv) > 0){
                output.append("-");
            } else{
      //Reset zuv and mlr before skipping
                zuv[1] += j; 
                mlr[2] -= j;
                continue; //goes back and starts the next j. skips the current term
            }
          
      //Write the terms that appear
            dotstoPoly(mlr);
          
      //Reset the Z's for the next j
           
            zuv[1] += j; 
            mlr[2] -= j; 
        }
    
    //remove the leading plus sign
        if(output.charAt(plusIndex) == '+'){
            output.deleteCharAt(plusIndex);
        }      
        return false;  
    }
    
    /**
     * prints an answer to the furnace evaluation in Calculator Mode
     * @param outFormat output format
     * @param alignmentOn LaTeX alignment on or off
     * @param inputDots the dots
   */
    public static void furnaceResult(int outFormat, boolean alignmentOn, int[] inputDots){
        
    //Writes result as user wishes: outFormat is for display format, alignmentOn is for alignment Characters
         
        switch(outFormat){
          
            case 0: //Polynomials
                output.append("F(");
                dotstoPoly(inputDots);
                break;
          
            case 1: //Foam Notation
                output.append("F_{" + inputDots[DOTS - 2] + inputDots[DOTS - 1] + "}(" + inputDots[0]);
            
          //write out coordinates in parentheses 
                for(int i = 1; i < MLRLEN; i++){
                    output.append(", " + inputDots[i]);
                }
              
                break;
          
            case 2: //tabular form with polynomials
                dotstoPoly(mlrab);
                output.append(" & "); //For alignment in table or array 
                break;
              
            default:
                output.append("F(");
                dotstoPoly(inputDots);
                break;                
        }
    
        if(alignmentOn && (outFormat != 2)){
            output.append(") &= ");
        } else if (outFormat != 2){
            output.append(") = ");
        }
      
        furnaceEval(inputDots);
        
        if(alignmentOn){ 
            output.append("\\\\");
        }
        
        output.append("\n");   //add new line character in the output box
        //output.delete(0, output.length()); //clear the string for the next line
    }
    
    /**
     * Recursively generates all possible dot configurations and evaluates them 
     * @param tblFormat  format for the table
     * @param alignmentOn LaTeX alignment characters on or off
     * @param k index used for recursion
   */
    public static void F3Images(int tblFormat, boolean alignmentOn, int k){
    
    //base case for recursion
        if (k < 0){                    
        //Change left column depending on user choice
            switch(tblFormat){
                case 0: //Original and Default
                    output.append("F(");
                    dotstoPoly(mlrab);
                    break;
                    
                case 1: //plug in polynomials
                    output.append("F_{" + mlrab[DOTS - 2] + mlrab[DOTS - 1] + "}(" + mlrab[0]);
                    
          //write out coordinates in parentheses
                    for(int i = 1; i < MLRLEN; i++){
                        output.append(", " + mlrab[i]);
                    }
                    
                    break;
                    
                case 2: //tabular form with polynomials
                    dotstoPoly(mlrab);
                    output.append(" & "); //For alignment in table or array 
                    break;
                   
                default:
                    output.append("F(");
                    dotstoPoly(mlrab);
                    break;          
            }      
            
            if(alignmentOn && (tblFormat != 2)){
                output.append(") &= ");
            } else if (tblFormat != 2){
                output.append(") = ");
            }
            
            if(furnaceEval(mlrab)){
                output.delete(0, output.length()); //clear the string for the next iteration
                return;
            } 
            
      //additional LaTeX formatting (optional)
            output.append(" \\\\ "); // to help escape something weird
            //output.append(" & ");   
            
      //generate the output in a list
            linesOfFile.add(output.toString()); //The Java 8 update changed append to add
            output.delete(0, output.length()); //clear the string for the next line
            
            return;
        }
      
    //Recursive generation and computation; generates all 5-tuples with 0, 1, or 2 only
        for(int i = 0; i < 3; i++){
            mlrab[k] += i;
            F3Images(tblFormat, alignmentOn, k - 1);
            mlrab[k] -= i;
        }
        return;  
    }    
    
    /**
     * Text File generator used in Save function
     * @param displayed The text in the output box
     * @param fileName  The desired file name and extension
     */
    public static void saveOutput(String displayed, String fileName){
        String[] lines = displayed.split("\n");
        
        linesOfFile.addAll(Arrays.asList(lines));
        
        //generate text file
        try{
            Files.write(Paths.get(fileName), linesOfFile);
        } catch(Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * Calculate Button action
     * @param evt click
     */
    private void calcButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calcButtonActionPerformed
        String inputs;
        StringBuilder convertInputs = new StringBuilder();
        int[] dots = new int[5];
                
        inputs = listInput.getText();
        convertInputs.append(inputs.replaceAll(" ", "").replaceAll("\n", ",")); 
        
        //Remove extra commas
        char[] removeExtras = convertInputs.toString().toCharArray();
        
        for(int i = 0; i < removeExtras.length; i++){
            if((removeExtras[i] != ',') && ((removeExtras[i] < '0') || (removeExtras[i] > '9'))){
                convertInputs.deleteCharAt(i);
            } else if((i < removeExtras.length - 1) && (removeExtras[i] == ',') && (removeExtras[i + 1] == ',')) {
                convertInputs.deleteCharAt(i);
            }
        }
        //remove extra comma at end if there is one
        int conInputsLen = convertInputs.length() - 1;
        
        if(convertInputs.charAt(conInputsLen) == ','){
            convertInputs.deleteCharAt(conInputsLen);
        }
        
        //Generate int Array end evaluate
        String[] allInputs = convertInputs.toString().split(",");
        convertInputs.delete(0, convertInputs.length()); //clear for next calculation
                        
        int numberOfInputs = allInputs.length / 5;
          
        for(int i = 0; i < numberOfInputs; i++){
        //fills in dots array with the inputs in the line
            for(int j = 0; j < dots.length; j++){
                dots[j] = Integer.parseInt(allInputs[ (5 * i) + j]);    
            }
            //computes and outputs the result to the output text box
            furnaceResult(displayFormat, formattingChars, dots);
            listOutput.append(output.toString());
            output.delete(0, output.length()); //clear the string for the next line
        }                    
    }//GEN-LAST:event_calcButtonActionPerformed

    /**
       * Help Dialogues and Menu
       * @param evt clicking the buttons
     */
    private void contentsCloseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_contentsCloseButtonActionPerformed
        contentsDialog.setVisible(false);
    }//GEN-LAST:event_contentsCloseButtonActionPerformed

    private void aboutCloseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutCloseButtonActionPerformed
        aboutDialog.setVisible(false);
    }//GEN-LAST:event_aboutCloseButtonActionPerformed

    private void contentsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_contentsMenuItemActionPerformed
        contentsDialog.setVisible(true);
    }//GEN-LAST:event_contentsMenuItemActionPerformed

    private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuItemActionPerformed
        aboutDialog.setVisible(true);
    }//GEN-LAST:event_aboutMenuItemActionPerformed

    /**
       *Display format menu options 
     */
    private void polynomialRadioButtonMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_polynomialRadioButtonMenuItemActionPerformed
        displayFormat = 0;
    }//GEN-LAST:event_polynomialRadioButtonMenuItemActionPerformed

    private void tupleRaidoButtonMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tupleRaidoButtonMenuItemActionPerformed
        displayFormat = 1;
    }//GEN-LAST:event_tupleRaidoButtonMenuItemActionPerformed

    private void tabularRadioButtonMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tabularRadioButtonMenuItemActionPerformed
        displayFormat = 2;
    }//GEN-LAST:event_tabularRadioButtonMenuItemActionPerformed

    private void formatCheckBoxMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_formatCheckBoxMenuItemActionPerformed
        formattingChars = !formattingChars;
    }//GEN-LAST:event_formatCheckBoxMenuItemActionPerformed
    
    /** 
       * Save Button actions
     */
    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        saveOutput(listOutput.getText(), "HKJRecord.txt");
    }//GEN-LAST:event_saveButtonActionPerformed
  
    /**
       * Table generator
     */
    private void tableGenButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tableGenButtonActionPerformed
        F3Images(displayFormat, formattingChars, DOTS - 1);
        //write the array into the output box
        linesOfFile.stream().forEach((line) -> {
            listOutput.append(line + "\n");
        });
    }//GEN-LAST:event_tableGenButtonActionPerformed

    /**
     * The File->Save action
     * @param evt clicking of Save
     */
    private void saveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuItemActionPerformed
        saveOutput(listOutput.getText(), "HKJRecord.txt");
    }//GEN-LAST:event_saveMenuItemActionPerformed

    /**
     * buttons for clearing the output and input boxes
     * @param evt clicking the buttons
     */
    private void outputClearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_outputClearButtonActionPerformed
        listOutput.setText(null);
    }//GEN-LAST:event_outputClearButtonActionPerformed

    private void clearAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearAllButtonActionPerformed
        listOutput.setText(null);
        listInput.setText(null);
    }//GEN-LAST:event_clearAllButtonActionPerformed

    /**
     * Save As Dialog box
     * @param evt clicking the buttons
     */
    private void saveAsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAsMenuItemActionPerformed
        saveAsDialog.setVisible(true);
    }//GEN-LAST:event_saveAsMenuItemActionPerformed

    private void newFileNameTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_newFileNameTextFieldKeyPressed
        if(evt.getKeyCode() == VK_ENTER){
            saveAsName = newFileNameTextField.getText();
            
            if(saveAsName.isEmpty()){
                saveAsName = "HKJRecord.txt";
            }else if(saveAsName.charAt(0) == ' '){
                saveAsName = "HKJRecord.txt";
            }else if(!saveAsName.contains(".")){
                saveAsName += ".txt";
            }
            
            saveOutput(listOutput.getText(), saveAsName);
            saveAsDialog.setVisible(false);
        }
    }//GEN-LAST:event_newFileNameTextFieldKeyPressed

    private void saveAsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAsButtonActionPerformed
        saveAsName = newFileNameTextField.getText();
            
        if(saveAsName.isEmpty()){
            saveAsName = "HKJRecord.txt";
        }else if(saveAsName.charAt(0) == ' '){
            saveAsName = "HKJRecord.txt";
        }else if(!saveAsName.contains(".")){
            saveAsName += ".txt";
        }
        
        saveOutput(listOutput.getText(), saveAsName);
        saveAsDialog.setVisible(false);
    }//GEN-LAST:event_saveAsButtonActionPerformed

    /**
     * Basic Edit Menu Functions
     * @param evt clicking the menu item
     */
    private void selectAllMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectAllMenuItemActionPerformed
        if(listInput.hasFocus()){
          listInput.selectAll();
        } else if (listOutput.hasFocus()){
          listOutput.selectAll();
        }
    }//GEN-LAST:event_selectAllMenuItemActionPerformed

    private void cutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cutMenuItemActionPerformed
        if(listInput.hasFocus()){
          listInput.cut();
        } else if (listOutput.hasFocus()){
          listOutput.cut();
        }
    }//GEN-LAST:event_cutMenuItemActionPerformed

    private void copyMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyMenuItemActionPerformed
        if(listInput.hasFocus()){
          listInput.copy();
        } else if (listOutput.hasFocus()){
          listOutput.copy();
        }        
    }//GEN-LAST:event_copyMenuItemActionPerformed

    private void pasteMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pasteMenuItemActionPerformed
        if(listInput.hasFocus()){
          listInput.paste();
        } else if (listOutput.hasFocus()){
          listOutput.paste();
        }
    }//GEN-LAST:event_pasteMenuItemActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(KhovanovJGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(KhovanovJGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(KhovanovJGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(KhovanovJGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new KhovanovJGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton aboutCloseButton;
    private javax.swing.JDialog aboutDialog;
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JButton calcButton;
    private javax.swing.JButton clearAllButton;
    private javax.swing.JButton contentsCloseButton;
    private javax.swing.JDialog contentsDialog;
    private javax.swing.JMenuItem contentsMenuItem;
    private javax.swing.JMenuItem copyMenuItem;
    private javax.swing.JMenuItem cutMenuItem;
    private javax.swing.ButtonGroup displayFormatButtonGroup;
    private javax.swing.JMenu displayFormatMenu;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JCheckBoxMenuItem formatCheckBoxMenuItem;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextArea listInput;
    private javax.swing.JTextArea listOutput;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JTextField newFileNameTextField;
    private javax.swing.JButton outputClearButton;
    private javax.swing.JMenuItem pasteMenuItem;
    private javax.swing.JRadioButtonMenuItem polynomialRadioButtonMenuItem;
    private javax.swing.JButton saveAsButton;
    private javax.swing.JDialog saveAsDialog;
    private javax.swing.JMenuItem saveAsMenuItem;
    private javax.swing.JButton saveButton;
    private javax.swing.JMenuItem saveMenuItem;
    private javax.swing.JMenuItem selectAllMenuItem;
    private javax.swing.JButton tableGenButton;
    private javax.swing.JRadioButtonMenuItem tabularRadioButtonMenuItem;
    private javax.swing.JRadioButtonMenuItem tupleRaidoButtonMenuItem;
    // End of variables declaration//GEN-END:variables
    public static int[] mlrab = {0,0,0,0,0};
    public static final int MLRLEN = mlrab.length - 2;
    public static final int DOTS = mlrab.length;
    public static String[] monomial = {"X^{", "Y^{", "Z^{", "U^{", "V^{" };
    //For the output File
    public static List<String> linesOfFile = new ArrayList<>();
    public static StringBuilder output = new StringBuilder();
    //Formatting
    public static int displayFormat = 0;
    public static boolean formattingChars = true;
    public static String saveAsName = "HKJRecord.txt";
}
